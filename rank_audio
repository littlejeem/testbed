#!/usr/bin/env bash
#
#
sed -n '/JSON Title Set: {/,$w main_feature_scan_trimmed.json' main_feature_scan.json
#now we need to delete the top line left as "JSON Title Set: {"
sed -i '1d' main_feature_scan_trimmed.json
#we now  need to insert a spare '{' & a '[' at the start of the file
sed -i '1s/^/{\n/' main_feature_scan_trimmed.json
sed -i '1s/^/[\n/' main_feature_scan_trimmed.json
#and now we need to add ']' to the end of the file
echo "]" >> main_feature_scan_trimmed.json
#now trim out the error line where '  HandBrake has exited.' is in the middle of the .json data
sed -i '/  HandBrake has exited./d' main_feature_scan_trimmed.json
#at this point the data is ready for 'parsing'
#
#
#+-----------------------+
#+---"Parse JSON Data"---+
#+-----------------------+
#this command pipes our trimmed file into 'jq' what we get out is a list of audio track names
main_feature_parse=$(jq '.[].TitleList[].AudioList[].Description' main_feature_scan_trimmed.json > parsed_audio_tracks)
#now we search the file for the line number of our preferred source because line number = track number of the audio
True_HD=$(grep -hn "TrueHD" parsed_audio_tracks | cut -c1)
echo $True_HD
DTS_HD=$(grep -hn "DTS-HD" parsed_audio_tracks | echo $DTS_HD | cut -c1)
echo $DTS_HD
if [[ $True_HD == "True_HD" ]]; then
  True_HD_boolean=true
else
  True_HD_boolean=true
fi
echo $True_HD_boolean
#
if [[ $True_HD == "True_HD" ]]; then
  True_HD_boolean=true
else
  True_HD_boolean=true
fi

#
